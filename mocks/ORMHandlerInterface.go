// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	x "github.com/ad3n/x"
)

// ORMHandlerInterface is an autogenerated mock type for the ORMHandlerInterface type
type ORMHandlerInterface struct {
	mock.Mock
}

// Context provides a mock function with given fields: c
func (_m *ORMHandlerInterface) Context(c *gin.Context) x.ORMHandlerInterface {
	ret := _m.Called(c)

	var r0 x.ORMHandlerInterface
	if rf, ok := ret.Get(0).(func(*gin.Context) x.ORMHandlerInterface); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(x.ORMHandlerInterface)
		}
	}

	return r0
}

// Create provides a mock function with given fields: data
func (_m *ORMHandlerInterface) Create(data x.ModelInterface) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(x.ModelInterface) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: model
func (_m *ORMHandlerInterface) Delete(model x.ModelInterface) error {
	ret := _m.Called(model)

	var r0 error
	if rf, ok := ret.Get(0).(func(x.ModelInterface) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: model
func (_m *ORMHandlerInterface) Get(model x.ModelInterface) error {
	ret := _m.Called(model)

	var r0 error
	if rf, ok := ret.Get(0).(func(x.ModelInterface) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRepository provides a mock function with given fields:
func (_m *ORMHandlerInterface) GetRepository() x.ORMRepositoryInterface {
	ret := _m.Called()

	var r0 x.ORMRepositoryInterface
	if rf, ok := ret.Get(0).(func() x.ORMRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(x.ORMRepositoryInterface)
		}
	}

	return r0
}

// Paginate provides a mock function with given fields: page, limit, filters
func (_m *ORMHandlerInterface) Paginate(page int, limit int, filters []x.Filter) ([]interface{}, error) {
	ret := _m.Called(page, limit, filters)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(int, int, []x.Filter) []interface{}); ok {
		r0 = rf(page, limit, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, []x.Filter) error); ok {
		r1 = rf(page, limit, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository provides a mock function with given fields: repository
func (_m *ORMHandlerInterface) Repository(repository x.ORMRepositoryInterface) x.ORMHandlerInterface {
	ret := _m.Called(repository)

	var r0 x.ORMHandlerInterface
	if rf, ok := ret.Get(0).(func(x.ORMRepositoryInterface) x.ORMHandlerInterface); ok {
		r0 = rf(repository)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(x.ORMHandlerInterface)
		}
	}

	return r0
}

// Update provides a mock function with given fields: data
func (_m *ORMHandlerInterface) Update(data x.ModelInterface) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(x.ModelInterface) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
