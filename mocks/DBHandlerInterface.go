// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	x "github.com/ad3n/x"
)

// DBHandlerInterface is an autogenerated mock type for the DBHandlerInterface type
type DBHandlerInterface struct {
	mock.Mock
}

// Context provides a mock function with given fields: c
func (_m *DBHandlerInterface) Context(c *gin.Context) x.DBHandlerInterface {
	ret := _m.Called(c)

	var r0 x.DBHandlerInterface
	if rf, ok := ret.Get(0).(func(*gin.Context) x.DBHandlerInterface); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(x.DBHandlerInterface)
		}
	}

	return r0
}

// GetRepository provides a mock function with given fields:
func (_m *DBHandlerInterface) GetRepository() x.RepositoryInterface {
	ret := _m.Called()

	var r0 x.RepositoryInterface
	if rf, ok := ret.Get(0).(func() x.RepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(x.RepositoryInterface)
		}
	}

	return r0
}

// Query provides a mock function with given fields: query
func (_m *DBHandlerInterface) Query(query x.Query) (map[string]interface{}, error) {
	ret := _m.Called(query)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(x.Query) map[string]interface{}); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(x.Query) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository provides a mock function with given fields: repository
func (_m *DBHandlerInterface) Repository(repository x.RepositoryInterface) x.DBHandlerInterface {
	ret := _m.Called(repository)

	var r0 x.DBHandlerInterface
	if rf, ok := ret.Get(0).(func(x.RepositoryInterface) x.DBHandlerInterface); ok {
		r0 = rf(repository)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(x.DBHandlerInterface)
		}
	}

	return r0
}
